@page "/"
@using Cocktail.Models
@using Cocktail.Services
@inject ICocktailService CocktailService
@inject IFavService FavService

<h1>Search for a cocktail</h1>
<p>
    <input type="search" @bind="searchName" placeholder="Cocktail's name or first letter" @onkeydown="HandleEnterKey" />
</p>

<p>

    <button @onclick="SearchCocktails">Search by name</button>
    <button @onclick="SearchCocktailsByFirstLetter">Search by first letter</button>
    <button @onclick="GetRandomCocktail">Random Cocktail</button><br/>
</p>


@if (cocktails != null)
{
    if (cocktails.Count == 0)
    {
        <p>No cocktail found.</p>
    }

    else
    {
        <ul>
            @foreach (var cocktail in cocktails)
            {
                <li>
                    <div class="cocktail-item">
                        <div class="cocktail-header">
                            <img class="cocktail-image" src="@cocktail.StrDrinkThumb" alt="@cocktail.StrDrink" width="100"/>
                            <div class ="cocktail-name-container">
                                <h4 class="cocktail-name">
                                    @cocktail.StrDrink
                                    <input id="@($"heart-{cocktail.StrDrink}")" type="checkbox"
                                           checked="@FavService.FavoriteCocktails.Any(c => c.StrDrink == cocktail.StrDrink)"
                                           @onchange="@(e => FavService.ToggleFavorite(cocktail))">
                                    <label for="@($"heart-{cocktail.StrDrink}")">❤</label> 
                                </h4>
                                <p class="cocktail-info">@cocktail.StrAlcoholic cocktail that should be served in a @cocktail.StrGlass.ToLower()</p>
                            </div>
                        </div>
                        
                        <details class="cocktail-details">
                            <summary>Ingredients</summary>
                            <ul>
                                @for (int i = 0; i < cocktail.Ingredients.Count; i += 2)
                                {
                                    <li>
                                        @cocktail.Ingredients[i]
                                        @if (i + 1 < cocktail.Ingredients.Count)
                                        {
                                            @(": " + cocktail.Ingredients[i + 1])
                                        }
                                    </li>
                                }
                            </ul>
                        </details>
                        <details class="cocktail-details">
                            <summary>Instructions</summary>
                            <p>@cocktail.StrInstructions</p>
                        </details>
                    </div>
                </li>
            }
        </ul>
    }
}


@code {
    
    private string searchName = "";
    public List<Cocktail> cocktails;
    private string response = "";

    private async Task SearchCocktails()
    {
        if (string.IsNullOrWhiteSpace(searchName))
        {
            return;
        }
        try
        {
            cocktails = await CocktailService.GetCocktailsByNameAsync(searchName);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task SearchCocktailsByFirstLetter()
    {
        if (string.IsNullOrWhiteSpace(searchName) || searchName.Length > 1)
        {
            return;
        }

        try
        {
            cocktails = await CocktailService.GetCocktailsByFirstLetterAsync(searchName);
            
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        
    }

    private async Task GetRandomCocktail()
    {
        try
        {
            var cocktail = await CocktailService.GetRandomCocktailAsync();
            cocktails = new List<Cocktail> { cocktail };
        }
        catch (HttpRequestException ex)
        {

            Console.WriteLine($"Error: {ex.Message}");
        }
    }
    
    private async Task HandleEnterKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchCocktails();
        }
    }
}

