@page "/"
@using Cocktail.Models
@using Cocktail.Services
@inject CocktailService CocktailService
@inject FavService FavService

<h1>Search for a cocktail</h1>
<EditForm Model ="@this" OnValidSubmit="SearchCocktails">
<DataAnnotationsValidator/>
<p>
    <input type="search" @bind="searchName" placeholder="Cocktail's name" />
</p>
<ValidationMessage For="@(() => searchName)"/>

<p>

    <button @onclick="SearchCocktails" disabled="@string.IsNullOrWhiteSpace(searchName)">Search by name</button>
    <button @onclick="SearchCocktailsByFirstLetter" disabled="@string.IsNullOrWhiteSpace(searchName)">Search by first letter</button>
    <button @onclick="GetRandomCocktail">Random Cocktail</button><br/>
</p>
</EditForm>

@if (cocktails.Count == 0)
{
<p>@response</p>
}
else
{
    <ul>
        @foreach (var cocktail in cocktails)
        {
            <li>
                <h4>
                    @cocktail.StrDrink
                    <input id="@($"heart-{cocktail.StrDrink}")" type="checkbox"
                           checked="@FavService.favoriteCocktails.Any(c => c.StrDrink == cocktail.StrDrink)"
                           @onchange="@(e => FavService.ToggleFavorite(cocktail))">
                    <label for="@($"heart-{cocktail.StrDrink}")">❤</label>
                </h4>
                <img src="@cocktail.StrDrinkThumb" alt="@cocktail.StrDrink" width="100"/>
                <p>@cocktail.StrAlcoholic cocktail that should be served in a @cocktail.StrGlass.ToLower()</p>
                <p><strong>Instructions :</strong> @cocktail.StrInstructions</p>
                <p><strong>Ingredients : </strong>
                    @for (int i = 0; i < cocktail.Ingredients.Count; i++)
                    {
                        @cocktail.Ingredients[i]
                        @(i % 2 == 0 && i < cocktail.Ingredients.Count - 1 ? " : " : " ")
                    }
                </p>
            </li>
        }
    </ul>
}

@code {
    private string searchName = "";
    private List<Cocktail> cocktails;
    private string response = "";

    private async Task SearchCocktails()
    {
        if (string.IsNullOrWhiteSpace(searchName))
        {
            response = "Enter the name of the cocktail you're looking for";
            return;
        }
        cocktails = await CocktailService.GetCocktailsByNameAsync(searchName);
    }

    private async Task SearchCocktailsByFirstLetter()
    {
        if (searchName.Length > 1)
        {
            response = "Only one letter allowed";
            return;
        }
        cocktails = await CocktailService.GetCocktailsByFirstLetterAsync(searchName);
    }

    private async Task GetRandomCocktail()
    {
        var cocktail = await CocktailService.GetRandomCocktailAsync();
        cocktails = new List<Cocktail> { cocktail };
    }
    
    
}

